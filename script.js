/**
 * AI Price Analyzer - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

class AIPriceAnalyzer {
    constructor() {
        this.products = [];
        this.searchHistory = [];
        this.logs = [];
        this.settings = this.loadSettings();
        this.isVoiceActive = false;
        this.speechRecognition = null;
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Price Analyzer');
        this.setupEventListeners();
        this.initVoiceRecognition();
        this.loadData();
        this.renderProducts();
        this.updateUI();
        this.log('info', '–°–∏—Å—Ç–µ–º–∞ AI Price Analyzer –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    loadSettings() {
        const defaultSettings = {
            apiKey: '',
            gptModel: 'gpt-4o',
            competitorPrompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –∏ –Ω–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.',
            avitoPrompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito –∏ –Ω–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –±/—É —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.',
            editPrompt: '–ü–æ–º–æ–≥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
        };
        
        try {
            const saved = localStorage.getItem('aiAnalyzerSettings');
            const settings = saved ? { ...defaultSettings, ...JSON.parse(saved) } : defaultSettings;
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return settings;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            return defaultSettings;
        }
    }

    saveSettings() {
        try {
            localStorage.setItem('aiAnalyzerSettings', JSON.stringify(this.settings));
            this.log('info', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
        } catch (error) {
            this.log('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', error);
        }
    }

    loadData() {
        try {
            const products = localStorage.getItem('aiAnalyzerProducts');
            const history = localStorage.getItem('aiAnalyzerHistory');
            
            if (products) {
                this.products = JSON.parse(products);
                console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            }
            
            if (history) {
                this.searchHistory = JSON.parse(history);
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.searchHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.log('error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', error);
        }
    }

    saveData() {
        try {
            localStorage.setItem('aiAnalyzerProducts', JSON.stringify(this.products));
            localStorage.setItem('aiAnalyzerHistory', JSON.stringify(this.searchHistory));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.log('error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', error);
        }
    }

    setupEventListeners() {
        console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                this.switchTab(e.target.dataset.tab);
            });
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
        const addProductBtn = document.getElementById('addProduct');
        if (addProductBtn) {
            addProductBtn.addEventListener('click', () => this.showProductModal());
        }
        
        const addFirstProductBtn = document.getElementById('addFirstProduct');
        if (addFirstProductBtn) {
            addFirstProductBtn.addEventListener('click', () => this.showProductModal());
        }

        // AI –¥–∏–∞–ª–æ–≥
        const sendMessageBtn = document.getElementById('sendMessage');
        if (sendMessageBtn) {
            sendMessageBtn.addEventListener('click', () => this.sendMessage());
        }
        
        const userInput = document.getElementById('userInput');
        if (userInput) {
            userInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const saveApiBtn = document.getElementById('saveApiSettings');
        if (saveApiBtn) {
            saveApiBtn.addEventListener('click', () => this.saveApiSettings());
        }
        
        const testConnectionBtn = document.getElementById('testConnection');
        if (testConnectionBtn) {
            testConnectionBtn.addEventListener('click', () => this.testConnection());
        }

        // –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const voiceToggleBtn = document.getElementById('voiceToggle');
        if (voiceToggleBtn) {
            voiceToggleBtn.addEventListener('click', () => this.toggleVoice());
        }

        // –§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞
        const productForm = document.getElementById('productForm');
        if (productForm) {
            productForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveProduct();
            });
        }
        
        const cancelProductBtn = document.getElementById('cancelProduct');
        if (cancelProductBtn) {
            cancelProductBtn.addEventListener('click', () => this.hideProductModal());
        }

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.hideAllModals();
            }
        });
        
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideAllModals();
            }
        });

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –í—ã–∑–æ–≤ OpenAI API
    async callOpenAI(messages, maxTokens = 2000, searchQuery = null, searchType = null) {
        if (!this.settings.apiKey) {
            throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á.');
        }

        if (!this.settings.apiKey.startsWith('sk-')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç OpenAI API –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-"');
        }

        this.showLoading('–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenAI API...');
        
        try {
            const requestBody = {
                apiKey: this.settings.apiKey,
                messages: messages,
                model: this.settings.gptModel,
                temperature: 0.1,
                maxTokens: maxTokens
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (searchQuery && searchType) {
                requestBody.searchQuery = searchQuery;
                requestBody.searchType = searchType;
                this.log('info', `–ó–∞–ø—Ä–æ—Å —Å –ø–æ–∏—Å–∫–æ–º: "${searchQuery}" (—Ç–∏–ø: ${searchType})`);
            }

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API');

            const response = await fetch('/api/openai', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: ${response.status}`);

            const data = await response.json();

            if (!response.ok) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API:', data);
                throw new Error(data.error || `HTTP ${response.status}: ${data.message || 'Unknown error'}`);
            }

            if (!data.choices || !data.choices[0] || !data.choices[0].message) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API');
            }

            const content = data.choices[0].message.content;
            
            this.log('info', '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API', {
                tokens: data.usage?.total_tokens || 'unknown',
                model: this.settings.gptModel
            });
            
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            return content;
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ OpenAI API:', error);
            throw error;
        } finally {
            this.hideLoading();
        }
    }

    // –ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    async searchCompetitorPrices(command) {
        const productName = this.extractProductName(command);
        if (!productName) {
            this.addMessage('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã');
            return;
        }

        try {
            this.log('info', `–ü–æ–∏—Å–∫ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è: ${productName}`);
            
            const messages = [
                {
                    role: 'system',
                    content: this.settings.competitorPrompt
                },
                {
                    role: 'user',
                    content: `–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä "${productName}" —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`
                }
            ];

            const response = await this.callOpenAI(messages, 2000, productName, 'competitor');
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.logSearchResult('competitor', productName, response);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            const minPrice = this.extractMinPrice(response);
            
            if (minPrice) {
                this.updateProductPrice(productName, 'competitorNewPrice', minPrice);
                this.addMessage('assistant', `‚úÖ **–ù–∞–π–¥–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${minPrice.toLocaleString()} ‚ÇΩ**\n\n${response}`);
                this.showNotification(`–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${productName}`, 'success');
            } else {
                this.addMessage('assistant', `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω:**\n\n${response}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
            this.log('error', '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', error);
            this.addMessage('error', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
        }
    }

    // –ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –Ω–∞ Avito
    async searchAvitoPrice(command) {
        const productName = this.extractProductName(command);
        if (!productName) {
            this.addMessage('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã');
            return;
        }

        try {
            this.log('info', `–ü–æ–∏—Å–∫ –±/—É —Ü–µ–Ω –Ω–∞ Avito –¥–ª—è: ${productName}`);
            
            const messages = [
                {
                    role: 'system',
                    content: this.settings.avitoPrompt
                },
                {
                    role: 'user',
                    content: `–ù–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –±/—É —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä "${productName}" –Ω–∞ Avito`
                }
            ];

            const response = await this.callOpenAI(messages, 2000, productName, 'avito');
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.logSearchResult('avito', productName, response);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            const minPrice = this.extractMinPrice(response);
            
            if (minPrice) {
                this.updateProductPrice(productName, 'competitorUsedPrice', minPrice);
                this.addMessage('assistant', `‚úÖ **–ù–∞–π–¥–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±/—É —Ü–µ–Ω–∞ –Ω–∞ Avito: ${minPrice.toLocaleString()} ‚ÇΩ**\n\n${response}`);
                this.showNotification(`–ë/—É —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${productName}`, 'success');
            } else {
                this.addMessage('assistant', `üõí **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito:**\n\n${response}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito:', error);
            this.log('error', '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito', error);
            this.addMessage('error', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito: ${error.message}`);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI –¥–∏–∞–ª–æ–≥
    async sendMessage() {
        const input = document.getElementById('userInput');
        if (!input) return;
        
        const message = input.value.trim();
        if (!message) return;
        
        this.addMessage('user', message);
        input.value = '';
        
        try {
            await this.processAICommand(message);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
            this.log('error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã AI', error);
            this.addMessage('error', `–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async processAICommand(command) {
        const lowerCommand = command.toLowerCase();
        
        if (lowerCommand.includes('–Ω–∞–π–¥–∏ —Ü–µ–Ω—É') && lowerCommand.includes('–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç')) {
            await this.searchCompetitorPrices(command);
        } else if (lowerCommand.includes('–Ω–∞–π–¥–∏') && lowerCommand.includes('–±/—É')) {
            await this.searchAvitoPrice(command);
        } else if (lowerCommand.includes('–∏–∑–º–µ–Ω–∏') || lowerCommand.includes('—É—Å—Ç–∞–Ω–æ–≤–∏') || lowerCommand.includes('–æ–±–Ω–æ–≤–∏')) {
            await this.editProductData(command);
        } else {
            this.addMessage('assistant', 'üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏:**\n\n‚Ä¢ **"–Ω–∞–π–¥–∏ —Ü–µ–Ω—É –Ω–∞ [—Ç–æ–≤–∞—Ä] —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"** - –ø–æ–∏—Å–∫ —Ü–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö\n‚Ä¢ **"–Ω–∞–π–¥–∏ –±/—É —Ü–µ–Ω—É –Ω–∞ [—Ç–æ–≤–∞—Ä]"** - –ø–æ–∏—Å–∫ –Ω–∞ Avito\n‚Ä¢ **"–∏–∑–º–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [—Ç–æ–≤–∞—Ä] –Ω–∞ [—á–∏—Å–ª–æ]"** - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n‚Ä¢ **"—É—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ [—Ç–æ–≤–∞—Ä] [—Ü–µ–Ω–∞]"** - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã\n\n*–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Ü–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤*');
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
    async editProductData(command) {
        try {
            const messages = [
                {
                    role: 'system',
                    content: this.settings.editPrompt
                },
                {
                    role: 'user',
                    content: `–ö–æ–º–∞–Ω–¥–∞: "${command}"\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: ${JSON.stringify(this.products.map(p => ({name: p.name, quantity: p.quantity, purchasePrice: p.purchasePrice, salePrice: p.salePrice})))}`
                }
            ];

            const response = await this.callOpenAI(messages);
            this.addMessage('assistant', response);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            this.log('error', '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', error);
            this.addMessage('error', `–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
        }
    }

    // –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    initVoiceRecognition() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.speechRecognition = new SpeechRecognition();
            
            this.speechRecognition.lang = 'ru-RU';
            this.speechRecognition.interimResults = false;
            
            this.speechRecognition.onresult = (event) => {
                const command = event.results[0][0].transcript;
                this.log('info', `–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: "${command}"`);
                this.processVoiceCommand(command);
            };
            
            this.speechRecognition.onerror = (event) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
                this.stopVoice();
            };
            
            this.speechRecognition.onend = () => {
                this.stopVoice();
            };
            
            console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } else {
            console.warn('‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    }

    toggleVoice() {
        if (this.isVoiceActive) {
            this.stopVoice();
        } else {
            this.startVoice();
        }
    }

    startVoice() {
        if (!this.speechRecognition) {
            this.showNotification('–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
            return;
        }
        
        this.isVoiceActive = true;
        this.speechRecognition.start();
        
        const voiceBtn = document.getElementById('voiceToggle');
        if (voiceBtn) {
            voiceBtn.classList.add('active');
            voiceBtn.textContent = 'üî¥ –ó–∞–ø–∏—Å—å';
        }
        
        this.log('info', '–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
    }

    stopVoice() {
        if (this.speechRecognition && this.isVoiceActive) {
            this.isVoiceActive = false;
            this.speechRecognition.stop();
            
            const voiceBtn = document.getElementById('voiceToggle');
            if (voiceBtn) {
                voiceBtn.classList.remove('active');
                voiceBtn.textContent = 'üé§ –ì–æ–ª–æ—Å';
            }
        }
    }

    processVoiceCommand(command) {
        const lowerCommand = command.toLowerCase();
        
        if (lowerCommand.includes('–Ω–∞–π–¥–∏ —Ü–µ–Ω—É') && lowerCommand.includes('–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç')) {
            this.searchCompetitorPrices(command);
        } else if (lowerCommand.includes('–Ω–∞–π–¥–∏') && lowerCommand.includes('–±/—É')) {
            this.searchAvitoPrice(command);
        } else {
            const userInput = document.getElementById('userInput');
            if (userInput) {
                userInput.value = command;
                this.sendMessage();
            }
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
    showProductModal(product = null) {
        console.log('üìù –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞');
        
        const modal = document.getElementById('productModal');
        const title = document.getElementById('modalTitle');
        
        if (!modal || !title) {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        if (product) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
            document.getElementById('productName').value = product.name || '';
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('productQuantity').value = product.quantity || '';
            document.getElementById('productPurchasePrice').value = product.purchasePrice || '';
            document.getElementById('productSalePrice').value = product.salePrice || '';
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
            const form = document.getElementById('productForm');
            if (form) form.reset();
        }
        
        modal.classList.add('active');
        modal.dataset.editingId = product ? product.id : '';
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        const nameInput = document.getElementById('productName');
        if (nameInput) {
            setTimeout(() => nameInput.focus(), 100);
        }
    }

    hideProductModal() {
        const modal = document.getElementById('productModal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    saveProduct() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        
        const form = document.getElementById('productForm');
        const modal = document.getElementById('productModal');
        
        if (!form || !modal) {
            console.error('‚ùå –§–æ—Ä–º–∞ –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const editingId = modal.dataset.editingId;
        
        const productData = {
            name: form.productName.value.trim(),
            description: form.productDescription.value.trim(),
            quantity: parseInt(form.productQuantity.value) || 0,
            purchasePrice: parseFloat(form.productPurchasePrice.value) || 0,
            salePrice: parseFloat(form.productSalePrice.value) || 0,
            competitorNewPrice: 0,
            competitorUsedPrice: 0,
            lastUpdated: new Date().toLocaleString('ru-RU')
        };
        
        if (!productData.name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'error');
            return;
        }
        
        if (editingId) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            const productIndex = this.products.findIndex(p => p.id === editingId);
            if (productIndex !== -1) {
                this.products[productIndex] = { ...this.products[productIndex], ...productData };
                this.log('info', `–¢–æ–≤–∞—Ä "${productData.name}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
            }
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            productData.id = Date.now().toString();
            this.products.push(productData);
            this.log('info', `–¢–æ–≤–∞—Ä "${productData.name}" –¥–æ–±–∞–≤–ª–µ–Ω`);
        }
        
        this.saveData();
        this.renderProducts();
        this.updateUI();
        this.hideProductModal();
        
        const action = editingId ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '–¥–æ–±–∞–≤–ª–µ–Ω';
        this.showNotification(`–¢–æ–≤–∞—Ä ${action}`, 'success');
        
        console.log(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" ${action}`);
    }

    deleteProduct(productId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
            const productIndex = this.products.findIndex(p => p.id === productId);
            if (productIndex !== -1) {
                const productName = this.products[productIndex].name;
                this.products.splice(productIndex, 1);
                this.saveData();
                this.renderProducts();
                this.updateUI();
                this.log('info', `–¢–æ–≤–∞—Ä "${productName}" —É–¥–∞–ª–µ–Ω`);
                this.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
            }
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    renderProducts() {
        console.log(`üîÑ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        const tbody = document.getElementById('productsTableBody');
        const emptyState = document.getElementById('emptyState');
        
        if (!tbody) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        if (this.products.length === 0) {
            tbody.innerHTML = '';
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (emptyState) emptyState.style.display = 'none';
        
        tbody.innerHTML = this.products.map(product => `
            <tr data-product-id="${product.id}">
                <td><input type="checkbox" class="product-checkbox" value="${product.id}"></td>
                <td><input type="text" value="${product.name || ''}" onchange="app.updateProduct('${product.id}', 'name', this.value)"></td>
                <td><textarea onchange="app.updateProduct('${product.id}', 'description', this.value)">${product.description || ''}</textarea></td>
                <td><input type="number" value="${product.quantity || 0}" onchange="app.updateProduct('${product.id}', 'quantity', parseInt(this.value))"></td>
                <td><input type="number" step="0.01" value="${product.purchasePrice || 0}" onchange="app.updateProduct('${product.id}', 'purchasePrice', parseFloat(this.value))"></td>
                <td><input type="number" step="0.01" value="${product.salePrice || 0}" onchange="app.updateProduct('${product.id}', 'salePrice', parseFloat(this.value))"></td>
                <td class="price-cell ${(product.competitorNewPrice || 0) > 0 ? 'has-price' : ''}">${(product.competitorNewPrice || 0) > 0 ? (product.competitorNewPrice).toLocaleString() + ' ‚ÇΩ' : '‚Äî'}</td>
                <td class="price-cell ${(product.competitorUsedPrice || 0) > 0 ? 'has-price' : ''}">${(product.competitorUsedPrice || 0) > 0 ? (product.competitorUsedPrice).toLocaleString() + ' ‚ÇΩ' : '‚Äî'}</td>
                <td class="last-updated">${product.lastUpdated || '‚Äî'}</td>
                <td class="cell-actions">
                    <button class="btn btn-sm" onclick="app.searchSingleCompetitor('${product.id}')" title="–ù–∞–π—Ç–∏ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤">üîç</button>
                    <button class="btn btn-sm" onclick="app.searchSingleAvito('${product.id}')" title="–ù–∞–π—Ç–∏ –Ω–∞ Avito">üõí</button>
                    <button class="btn btn-sm" onclick="app.showProductModal(app.getProduct('${product.id}'))" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-sm btn-danger" onclick="app.deleteProduct('${product.id}')" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    updateProduct(productId, field, value) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            product[field] = value;
            product.lastUpdated = new Date().toLocaleString('ru-RU');
            this.saveData();
            this.log('info', `–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ ${field} —Ç–æ–≤–∞—Ä–∞ ${product.name}`);
        }
    }

    getProduct(productId) {
        return this.products.find(p => p.id === productId);
    }

    async searchSingleCompetitor(productId) {
        const product = this.getProduct(productId);
        if (product) {
            await this.searchCompetitorPrices(`–Ω–∞–π–¥–∏ —Ü–µ–Ω—É –Ω–∞ ${product.name} —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
        }
    }

    async searchSingleAvito(productId) {
        const product = this.getProduct(productId);
        if (product) {
            await this.searchAvitoPrice(`–Ω–∞–π–¥–∏ –±/—É —Ü–µ–Ω—É –Ω–∞ ${product.name}`);
        }
    }

    extractProductName(command) {
        const patterns = [
            /–Ω–∞–π–¥–∏.*?(?:—Ü–µ–Ω—É|–±\/—É).*?–Ω–∞\s+(.+?)(?:\s+—É|\s*$)/i,
            /–∏–∑–º–µ–Ω–∏.*?–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\s+(.+?)\s+–Ω–∞/i,
            /—É—Å—Ç–∞–Ω–æ–≤–∏.*?—Ü–µ–Ω—É.*?\s+(.+?)\s+\d+/i
        ];
        
        for (const pattern of patterns) {
            const match = command.match(pattern);
            if (match) {
                return match[1].trim();
            }
        }
        
        return null;
    }

    extractMinPrice(response) {
        const pricePatterns = [
            /–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è\s+(?:—Ü–µ–Ω–∞|–±\/—É\s+—Ü–µ–Ω–∞)[:\s]*(\d+(?:\s*\d+)*)/gi,
            /(\d+(?:\s*\d+)*)\s*‚ÇΩ/gi,
            /—Ü–µ–Ω–∞[:\s]*(\d+(?:\s*\d+)*)/gi
        ];
        
        const prices = [];
        
        for (const pattern of pricePatterns) {
            let match;
            while ((match = pattern.exec(response)) !== null) {
                const priceStr = match[1].replace(/\s+/g, '');
                const price = parseInt(priceStr);
                if (price > 100 && price < 10000000) {
                    prices.push(price);
                }
            }
        }
        
        return prices.length > 0 ? Math.min(...prices) : null;
    }

    updateProductPrice(productName, priceField, price) {
        const product = this.products.find(p => 
            p.name.toLowerCase().includes(productName.toLowerCase()) ||
            productName.toLowerCase().includes(p.name.toLowerCase())
        );
        
        if (product) {
            product[priceField] = price;
            product.lastUpdated = new Date().toLocaleString('ru-RU');
            this.saveData();
            this.renderProducts();
            this.log('info', `–û–±–Ω–æ–≤–ª–µ–Ω–∞ ${priceField} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${price}`);
        }
    }

    logSearchResult(type, productName, result) {
        const searchResult = {
            id: Date.now(),
            timestamp: new Date().toLocaleString('ru-RU'),
            type: type,
            productName: productName,
            result: result,
            minPrice: this.extractMinPrice(result)
        };
        
        this.searchHistory.unshift(searchResult);
        if (this.searchHistory.length > 100) {
            this.searchHistory = this.searchHistory.slice(0, 100);
        }
        
        this.saveData();
        this.log('info', `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ ${type} –¥–ª—è "${productName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
    }

    // UI –º–µ—Ç–æ–¥—ã
    switchTab(tabName) {
        if (!tabName) return;
        
        console.log(`üîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
        
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        document.querySelectorAll('.nav-tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        const targetTab = document.querySelector(`[data-tab="${tabName}"]`);
        const targetContent = document.getElementById(tabName);
        
        if (targetTab) targetTab.classList.add('active');
        if (targetContent) targetContent.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
        this.updateTabContent(tabName);
    }

    updateTabContent(tabName) {
        switch (tabName) {
            case 'settings':
                this.renderSettings();
                break;
        }
    }

    updateUI() {
        this.updateAPIStatus();
        this.updateProductCount();
    }

    updateAPIStatus() {
        const statusElement = document.getElementById('apiStatus');
        
        if (!statusElement) return;
        
        if (this.settings.apiKey && this.settings.apiKey.startsWith('sk-')) {
            statusElement.textContent = 'API –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
            statusElement.className = 'status success';
        } else {
            statusElement.textContent = 'API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
            statusElement.className = 'status error';
        }
    }

    updateProductCount() {
        const countElement = document.getElementById('productCount');
        if (countElement) {
            countElement.textContent = `–¢–æ–≤–∞—Ä–æ–≤: ${this.products.length}`;
        }
    }

    addMessage(type, content) {
        const messagesContainer = document.getElementById('dialogMessages');
        if (!messagesContainer) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        
        messageDiv.innerHTML = `
            <div class="message-content">
                ${content.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')}
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    showNotification(message, type = 'info') {
        console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        const notifications = document.getElementById('notifications');
        if (notifications) {
            notifications.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 5000);
        }
    }

    showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        const loading = document.getElementById('loadingIndicator');
        const loadingText = document.querySelector('.loading-text');
        
        if (loading && loadingText) {
            loadingText.textContent = message;
            loading.classList.add('active');
        }
    }

    hideLoading() {
        const loading = document.getElementById('loadingIndicator');
        if (loading) {
            loading.classList.remove('active');
        }
    }

    hideAllModals() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.classList.remove('active');
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    renderSettings() {
        const apiKeyInput = document.getElementById('apiKey');
        const modelSelect = document.getElementById('gptModel');
        
        if (apiKeyInput) apiKeyInput.value = this.settings.apiKey;
        if (modelSelect) modelSelect.value = this.settings.gptModel;
    }

    saveApiSettings() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API');
        
        const apiKeyInput = document.getElementById('apiKey');
        const modelSelect = document.getElementById('gptModel');
        
        if (apiKeyInput) this.settings.apiKey = apiKeyInput.value.trim();
        if (modelSelect) this.settings.gptModel = modelSelect.value;
        
        this.saveSettings();
        this.updateUI();
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        
        this.log('info', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    async testConnection() {
        if (!this.settings.apiKey) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á', 'error');
            return;
        }
        
        try {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI');
            
            const messages = [
                {
                    role: 'system',
                    content: '–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
                },
                {
                    role: 'user',
                    content: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API'
                }
            ];
            
            const response = await this.callOpenAI(messages, 50);
            
            if (response.toLowerCase().includes('—Ä–∞–±–æ—Ç–∞–µ—Ç') || response.toLowerCase().includes('–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')) {
                this.showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —É—Å–ø–µ—à–Ω–æ', 'success');
                this.updateAPIStatus();
                console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω');
            } else {
                this.showNotification('‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π', 'warning');
                console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'error');
            this.log('error', '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API', error);
        }
    }

    log(level, message, data = null) {
        const logEntry = {
            timestamp: new Date().toLocaleString('ru-RU'),
            level: level,
            message: message,
            data: data
        };
        
        this.logs.unshift(logEntry);
        
        if (this.logs.length > 1000) {
            this.logs = this.logs.slice(0, 1000);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        const logMessage = `[${level.toUpperCase()}] ${message}`;
        switch (level) {
            case 'error':
                console.error(logMessage, data || '');
                break;
            case 'warning':
                console.warn(logMessage, data || '');
                break;
            default:
                console.log(logMessage, data || '');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ AI Price Analyzer');
    try {
        app = new AIPriceAnalyzer();
        console.log('‚úÖ AI Price Analyzer –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
});