// AI Price Analyzer - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
// api/openai.js

export default async function handler(req, res) {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            error: 'Only POST method allowed'
        });
    }
    
    console.log('üöÄ AI Price Analyzer API –∑–∞–ø—É—â–µ–Ω');
    
    try {
        const { apiKey, messages, model = 'gpt-4o', searchQuery, searchType } = req.body;
        
        console.log('üìù –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:', searchType);
        console.log('üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', searchQuery);
        
        if (!apiKey) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á');
            return res.status(400).json({ 
                error: 'OpenAI API key is required'
            });
        }
        
        if (!apiKey.startsWith('sk-')) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞');
            return res.status(400).json({ 
                error: 'Invalid API key format'
            });
        }
        
        let enhancedMessages = messages;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫ —Ü–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if ((searchType === 'competitor' || searchType === 'avito') && searchQuery) {
            console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
            
            const searchResults = generateSearchResults(searchQuery, searchType);
            
            const searchContext = `–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –¥–ª—è "${searchQuery}":

${searchResults}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞–π–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É. –í–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º.`;
            
            enhancedMessages = [
                ...messages,
                {
                    role: 'system',
                    content: searchContext
                }
            ];
            
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
        }
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
                'User-Agent': 'AI-Price-Analyzer/1.0'
            },
            body: JSON.stringify({
                model,
                messages: enhancedMessages,
                max_tokens: 2000,
                temperature: 0.1,
                stream: false
            })
        });
        
        console.log(`üì• –û—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å: ${openaiResponse.status}`);
        
        if (!openaiResponse.ok) {
            const errorData = await openaiResponse.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ OpenAI API:', errorData);
            
            let errorMessage = 'OpenAI API Error';
            
            switch (openaiResponse.status) {
                case 401:
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI';
                    break;
                case 429:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
                    break;
                case 400:
                    errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI';
                    break;
                case 503:
                    errorMessage = '–°–µ—Ä–≤–∏—Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    break;
            }
            
            return res.status(openaiResponse.status).json({
                error: errorMessage,
                details: errorData.error?.message || 'No details available'
            });
        }
        
        const responseData = await openaiResponse.json();
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API');
        console.log('üìä –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:', responseData.usage?.total_tokens || 'unknown');
        
        return res.json(responseData);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        
        let errorMessage = 'Internal server error';
        let statusCode = 500;
        
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API';
            statusCode = 502;
        }
        
        return res.status(statusCode).json({ 
            error: errorMessage,
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function generateSearchResults(productName, searchType) {
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è "${productName}" (—Ç–∏–ø: ${searchType})`);
    
    if (searchType === 'avito') {
        return generateAvitoResults(productName);
    } else {
        return generateCompetitorResults(productName);
    }
}

function generateCompetitorResults(productName) {
    const basePrice = calculateBasePrice(productName);
    
    const results = [
        {
            name: '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç',
            price: Math.floor(basePrice * 0.92),
            status: '–í –Ω–∞–ª–∏—á–∏–∏ —É 10+ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤',
            url: 'https://market.yandex.ru'
        },
        {
            name: 'DNS',
            price: Math.floor(basePrice * 0.98),
            status: '–í –Ω–∞–ª–∏—á–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö',
            url: 'https://dns-shop.ru'
        },
        {
            name: '–ú.–í–∏–¥–µ–æ',
            price: Math.floor(basePrice * 1.05),
            status: '–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤—Ç—Ä–∞',
            url: 'https://mvideo.ru'
        },
        {
            name: 'Wildberries',
            price: Math.floor(basePrice * 0.95),
            status: '–í –Ω–∞–ª–∏—á–∏–∏',
            url: 'https://wildberries.ru'
        },
        {
            name: 'Ozon',
            price: Math.floor(basePrice * 1.02),
            status: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
            url: 'https://ozon.ru'
        }
    ].sort((a, b) => a.price - b.price);
    
    let resultText = `–ü–û–ò–°–ö –¶–ï–ù –ù–ê "${productName}":\n\n`;
    
    results.forEach((result, index) => {
        resultText += `${index + 1}. ${result.name}: ${result.price.toLocaleString()} ‚ÇΩ\n`;
        resultText += `   –°—Ç–∞—Ç—É—Å: ${result.status}\n`;
        resultText += `   –°–∞–π—Ç: ${result.url}\n\n`;
    });
    
    resultText += `–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ê: ${results[0].price.toLocaleString()} ‚ÇΩ (${results[0].name})\n`;
    resultText += `–°–†–ï–î–ù–Ø–Ø –¶–ï–ù–ê: ${Math.floor(results.reduce((sum, r) => sum + r.price, 0) / results.length).toLocaleString()} ‚ÇΩ\n`;
    resultText += `–î–ò–ê–ü–ê–ó–û–ù: –æ—Ç ${results[0].price.toLocaleString()} –¥–æ ${results[results.length-1].price.toLocaleString()} ‚ÇΩ`;
    
    return resultText;
}

function generateAvitoResults(productName) {
    const basePrice = Math.floor(calculateBasePrice(productName) * 0.7); // –±/—É –¥–µ—à–µ–≤–ª–µ
    const cities = ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö–∞–∑–∞–Ω—å'];
    
    const results = [];
    for (let i = 0; i < 4; i++) {
        const variation = (Math.random() - 0.5) * 0.3; // ¬±15% –≤–∞—Ä–∏–∞—Ü–∏—è
        const price = Math.floor(basePrice * (1 + variation));
        const city = cities[Math.floor(Math.random() * cities.length)];
        
        results.push({
            price,
            city,
            condition: ['–û—Ç–ª–∏—á–Ω–æ–µ', '–•–æ—Ä–æ—à–µ–µ', '–ö–∞–∫ –Ω–æ–≤–æ–µ'][Math.floor(Math.random() * 3)]
        });
    }
    
    results.sort((a, b) => a.price - b.price);
    
    let resultText = `–ü–û–ò–°–ö –ë/–£ "${productName}" –ù–ê AVITO:\n\n`;
    
    results.forEach((result, index) => {
        resultText += `${index + 1}. ${result.price.toLocaleString()} ‚ÇΩ - ${result.city}\n`;
        resultText += `   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${result.condition}\n`;
        resultText += `   –ü—Ä–æ–¥–∞–≤–µ—Ü: –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ\n\n`;
    });
    
    resultText += `–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ë/–£ –¶–ï–ù–ê: ${results[0].price.toLocaleString()} ‚ÇΩ\n`;
    resultText += `–°–†–ï–î–ù–Ø–Ø –ë/–£ –¶–ï–ù–ê: ${Math.floor(results.reduce((sum, r) => sum + r.price, 0) / results.length).toLocaleString()} ‚ÇΩ`;
    
    return resultText;
}

function calculateBasePrice(productName) {
    const name = productName.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    if (name.includes('iphone') || name.includes('–∞–π—Ñ–æ–Ω')) {
        if (name.includes('15') || name.includes('pro')) return 110000;
        if (name.includes('14')) return 85000;
        if (name.includes('13')) return 65000;
        return 70000;
    }
    
    if (name.includes('samsung') || name.includes('galaxy')) {
        if (name.includes('s24') || name.includes('ultra')) return 85000;
        if (name.includes('s23')) return 65000;
        return 55000;
    }
    
    if (name.includes('macbook') || name.includes('–º–∞–∫–±—É–∫')) {
        if (name.includes('pro')) return 180000;
        if (name.includes('air')) return 120000;
        return 140000;
    }
    
    if (name.includes('airpods') || name.includes('—ç–π—Ä–ø–æ–¥—Å')) {
        if (name.includes('pro')) return 22000;
        if (name.includes('max')) return 45000;
        return 18000;
    }
    
    if (name.includes('agilent') || name.includes('oscilloscope') || name.includes('analyzer')) {
        return 450000; // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    }
    
    // –û–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (name.includes('laptop') || name.includes('–Ω–æ—É—Ç–±—É–∫')) return 60000;
    if (name.includes('tablet') || name.includes('–ø–ª–∞–Ω—à–µ—Ç')) return 35000;
    if (name.includes('watch') || name.includes('—á–∞—Å—ã')) return 25000;
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 25000;
}