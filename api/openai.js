// AI Price Analyzer - Serverless —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel
// api/openai.js

export default async function handler(req, res) {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'OPTIONS') {
        console.log('‚úÖ CORS preflight –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        return res.status(200).end();
    }
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'POST') {
        console.log(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: ${req.method}`);
        return res.status(405).json({ 
            error: 'Only POST method allowed',
            received: req.method
        });
    }
    
    console.log('üöÄ AI Price Analyzer - Serverless —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    console.log(`üìä –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
    
    try {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        let requestBody;
        if (typeof req.body === 'string') {
            requestBody = JSON.parse(req.body);
        } else {
            requestBody = req.body;
        }
        
        const { 
            apiKey, 
            messages, 
            model = 'gpt-4o', 
            temperature = 0.1, 
            maxTokens = 3000 
        } = requestBody;
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        console.log('üìã –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        if (!apiKey) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á');
            return res.status(400).json({ 
                error: 'OpenAI API key is required',
                code: 'MISSING_API_KEY'
            });
        }
        
        if (!apiKey.startsWith('sk-')) {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞: ${apiKey.substring(0, 10)}...`);
            return res.status(400).json({ 
                error: 'API key must start with "sk-"',
                code: 'INVALID_API_KEY_FORMAT'
            });
        }
        
        if (!messages || !Array.isArray(messages) || messages.length === 0) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ messages');
            return res.status(400).json({ 
                error: 'Messages array is required and should not be empty',
                code: 'MISSING_MESSAGES'
            });
        }
        
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, {
            model,
            temperature,
            maxTokens,
            messagesCount: messages.length
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
        if (messages[0] && messages[0].role === 'system') {
            const systemPromptPreview = messages[0].content.substring(0, 300);
            console.log(`ü§ñ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${systemPromptPreview}...`);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        const userMessage = messages.find(msg => msg.role === 'user');
        if (userMessage) {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: ${userMessage.content}`);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
        const openaiPayload = {
            model,
            messages,
            max_tokens: maxTokens,
            temperature,
            stream: false,
            presence_penalty: 0,
            frequency_penalty: 0
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API...');
        console.log('üîó URL: https://api.openai.com/v1/chat/completions');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
                'User-Agent': 'AI-Price-Analyzer/2.0'
            },
            body: JSON.stringify(openaiPayload)
        });
        
        console.log(`üì• –û—Ç–≤–µ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å: ${openaiResponse.status}`);
        
        const responseData = await openaiResponse.json();
        
        if (!openaiResponse.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç OpenAI API:', {
                status: openaiResponse.status,
                error: responseData.error
            });
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
            let errorMessage = 'OpenAI API Error';
            let errorCode = 'OPENAI_ERROR';
            
            switch (openaiResponse.status) {
                case 401:
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞';
                    errorCode = 'INVALID_API_KEY';
                    break;
                case 429:
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
                    errorCode = 'RATE_LIMIT_EXCEEDED';
                    break;
                case 400:
                    errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI API';
                    errorCode = 'BAD_REQUEST';
                    break;
                case 503:
                    errorMessage = '–°–µ—Ä–≤–∏—Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    errorCode = 'SERVICE_UNAVAILABLE';
                    break;
                default:
                    errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI API';
                    errorCode = 'UNKNOWN_OPENAI_ERROR';
            }
            
            return res.status(openaiResponse.status).json({
                error: errorMessage,
                code: errorCode,
                details: responseData.error?.message || 'No additional details',
                openaiStatus: openaiResponse.status
            });
        }
        
        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API');
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', {
            promptTokens: responseData.usage?.prompt_tokens || 'unknown',
            completionTokens: responseData.usage?.completion_tokens || 'unknown', 
            totalTokens: responseData.usage?.total_tokens || 'unknown'
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        const responseContent = responseData.choices?.[0]?.message?.content || '';
        console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ${responseContent.substring(0, 500)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON (–¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        let isStructuredResponse = false;
        try {
            JSON.parse(responseContent);
            isStructuredResponse = true;
            console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)');
        } catch {
            console.log('‚ÑπÔ∏è –û—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
        }
        
        // –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const enhancedResponse = {
            ...responseData,
            _metadata: {
                timestamp: new Date().toISOString(),
                processingTime: 'completed',
                isStructured: isStructuredResponse,
                serverlessVersion: '2.0',
                model: model,
                tokensUsed: responseData.usage?.total_tokens || 0
            }
        };
        
        return res.status(200).json(enhancedResponse);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ serverless —Ñ—É–Ω–∫—Ü–∏–∏:', {
            name: error.name,
            message: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : 'stack hidden'
        });
        
        // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        let errorType = 'UNKNOWN_ERROR';
        let statusCode = 500;
        let userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        
        if (error.name === 'SyntaxError' && error.message.includes('JSON')) {
            errorType = 'JSON_PARSE_ERROR';
            statusCode = 400;
            userMessage = '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ –∑–∞–ø—Ä–æ—Å–µ';
        } else if (error.code === 'ENOTFOUND') {
            errorType = 'NETWORK_ERROR';
            statusCode = 502;
            userMessage = '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI';
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            errorType = 'FETCH_ERROR';
            statusCode = 502;
            userMessage = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API';
        } else if (error.message.includes('timeout')) {
            errorType = 'TIMEOUT_ERROR';
            statusCode = 504;
            userMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI';
        }
        
        return res.status(statusCode).json({ 
            error: userMessage,
            code: errorType,
            timestamp: new Date().toISOString(),
            requestId: req.headers['x-vercel-id'] || 'unknown',
            debug: process.env.NODE_ENV === 'development' ? {
                originalError: error.message,
                errorName: error.name
            } : undefined
        });
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Vercel
export const config = {
    api: {
        bodyParser: {
            sizeLimit: '1mb',
        },
        responseLimit: '8mb'
    },
    maxDuration: 30 // –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å
};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export const version = {
    name: 'AI Price Analyzer OpenAI Proxy',
    version: '2.0.0',
    author: 'AI Price Analyzer System',
    description: 'Serverless —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    features: [
        'CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI',
        '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫',
        '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤'
    ]
};